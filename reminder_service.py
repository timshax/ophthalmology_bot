import asyncio
import aioschedule
from aiogram import Bot
from config import BOT_TOKEN
from database import send_reminders


async def send_daily_reminders():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    bot = Bot(token=BOT_TOKEN)
    try:
        print("üîî –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        sent_count = await send_reminders(bot)
        print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
        return sent_count
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return 0
    finally:
        await bot.session.close()


async def start_reminder_service():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    print("‚è∞ –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    aioschedule.every().day.at("09:00").do(lambda: asyncio.create_task(send_daily_reminders()))
    aioschedule.every().monday.at("10:00").do(lambda: asyncio.create_task(send_weekly_report()))

    print("‚úÖ –°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
    print("   - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:00: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    print("   - –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00: –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")

    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


async def send_weekly_report():
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    from database import get_all_patients, get_patients_due_for_visit

    patients = await get_all_patients()
    due_patients = await get_patients_due_for_visit(7)  # –ù–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥

    registered = sum(1 for p in patients if p.get('chat_id'))
    due_count = len(due_patients)

    print(f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:")
    print(f"   - –í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(patients)}")
    print(f"   - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ –±–æ—Ç–µ: {registered}")
    print(f"   - –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤–∏–∑–∏—Ç—ã (7 –¥–Ω–µ–π): {due_count}")
    print(f"   - –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(patients) - registered}")


async def manual_send_reminders():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    print("üîî –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    count = await send_daily_reminders()
    print(f"‚úÖ –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")


if __name__ == "__main__":
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    asyncio.run(start_reminder_service())