from aiogram import Router, types
from aiogram.filters import Command

from database import find_patient_by_chat_id, find_patient_by_username, update_patient_chat_id, get_all_patients
from config import MESSAGE_TEMPLATES
from keyboards import get_main_inline_keyboard, get_registration_inline_keyboard  # –ò–º–ø–æ—Ä—Ç –∏–∑ –ø–∞–∫–µ—Ç–∞ keyboards

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""

    username = message.from_user.username
    print(f"üîç Inline: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —Å username: {username}")

    if not username:
        keyboard = get_registration_inline_keyboard()
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        return

    telegram_username = f"@{username}"
    patient = await find_patient_by_username(telegram_username)

    # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
    all_patients = await get_all_patients()
    print(f"üîç –í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã –≤ –±–∞–∑–µ:")
    for p in all_patients:
        print(f"   ID: {p['id']}, Username: {p.get('telegram_username')}, Name: {p['full_name']}")

    print(f"üîç –ò—â–µ–º: {telegram_username}")
    print(f"üîç –ù–∞–π–¥–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç: {patient}")

    if patient:
        await update_patient_chat_id(patient['id'], message.chat.id)

        keyboard = get_main_inline_keyboard()
        await message.answer(
            f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {patient['full_name']}!\n\n"
            f"–Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–∏–∑–∏—Ç–∞—Ö –∫ –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥—É.\n\n"
            f"üìã <b>–í–∞—à –¥–∏–∞–≥–Ω–æ–∑:</b> {patient['diagnosis']}\n"
            f"üìÖ <b>–°–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç:</b> {patient['next_visit']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        print(f"‚úÖ Inline: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {patient['full_name']} (ID: {patient['id']}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    else:
        keyboard = get_registration_inline_keyboard()
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.\n\n"
            "–ï—Å–ª–∏ –≤—ã –ø–∞—Ü–∏–µ–Ω—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É.",
            reply_markup=keyboard
        )


@router.message(Command("menu"))
async def cmd_menu(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å inline-–º–µ–Ω—é"""
    keyboard = get_main_inline_keyboard()
    await message.answer(
        "üì± <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@router.message(Command("debug"))
async def cmd_debug(message: types.Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    username = message.from_user.username
    all_patients = await get_all_patients()
    current_patient = await find_patient_by_username(f"@{username}") if username else None

    debug_info = (
        f"üë§ <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        f"‚Ä¢ <b>–í–∞—à username:</b> @{username if username else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"‚Ä¢ <b>Chat ID:</b> {message.chat.id}\n"
        f"‚Ä¢ <b>–í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤:</b> {len(all_patients)}\n"
        f"‚Ä¢ <b>–í—ã –≤ –±–∞–∑–µ:</b> {'‚úÖ –î–ê' if current_patient else '‚ùå –ù–ï–¢'}\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ username:</b>\n"
    )

    for patient in all_patients:
        status = "‚úÖ" if patient.get('chat_id') else "‚ùå"
        debug_info += f"{status} {patient.get('telegram_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')} - {patient['full_name']}\n"

    await message.answer(debug_info, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data == "my_data")
async def process_my_data(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ'"""
    patient = await find_patient_by_chat_id(callback_query.from_user.id)

    if patient:
        diagnosis_info = MESSAGE_TEMPLATES.get(patient['diagnosis'], {})
        educational = diagnosis_info.get('educational', '')

        response = (
            f"üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"‚Ä¢ <b>–§–ò–û:</b> {patient['full_name']}\n"
            f"‚Ä¢ <b>Telegram:</b> {patient.get('telegram_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ <b>–î–∏–∞–≥–Ω–æ–∑:</b> {patient['diagnosis']}\n"
            f"‚Ä¢ <b>–°–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç:</b> {patient['next_visit']}\n\n"
            f"{educational}"
        )
    else:
        response = "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start"

    await callback_query.message.answer(response, parse_mode='HTML')
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "next_visit")
async def process_next_visit(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–ª–∏–∂–∞–π—à–∏–π –≤–∏–∑–∏—Ç'"""
    patient = await find_patient_by_chat_id(callback_query.from_user.id)

    if patient:
        template = MESSAGE_TEMPLATES.get(patient['diagnosis'], {}).get('reminder',
                                                                       "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∏–∑–∏—Ç–µ {visit_date} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}.")

        reminder_text = template.format(
            name=patient['full_name'],
            visit_date=patient['next_visit']
        )
        response = reminder_text
    else:
        response = "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start"

    await callback_query.message.answer(response)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "education")
async def process_education(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—É—á–µ–Ω–∏–µ'"""
    patient = await find_patient_by_chat_id(callback_query.from_user.id)

    if patient:
        educational = MESSAGE_TEMPLATES.get(patient['diagnosis'], {}).get('educational',
                                                                          "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Å–º–æ—Ç—Ä—ã –≤–∞–∂–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –≤–∞—à–∏—Ö –≥–ª–∞–∑.")
        response = educational
    else:
        response = "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start"

    await callback_query.message.answer(response)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "admin_list")
async def process_admin_list(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤'"""
    patients = await get_all_patients()

    response = "üë• <b>–í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã:</b>\n\n"
    for patient in patients:
        status = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if patient.get('chat_id') else "‚ùå –ù–µ –≤ –±–æ—Ç–µ"
        response += (
            f"‚Ä¢ <b>{patient['full_name']}</b>\n"
            f"  üë§ {patient.get('telegram_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"  üè• {patient['diagnosis']}\n"
            f"  üìÖ {patient['next_visit']}\n"
            f"  üìä {status}\n\n"
        )

    await callback_query.message.answer(response, parse_mode='HTML')
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "refresh_menu")
async def process_refresh_menu(callback_query: types.CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é"""
    keyboard = get_main_inline_keyboard()
    await callback_query.message.edit_text(
        "üì± <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback_query.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")


@router.callback_query(lambda c: c.data == "register")
async def process_register(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await cmd_start(callback_query.message)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "retry_register")
async def process_retry_register(callback_query: types.CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await cmd_start(callback_query.message)
    await callback_query.answer()