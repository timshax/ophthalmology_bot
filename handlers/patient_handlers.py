from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from database import find_patient_by_chat_id
from config import MESSAGE_TEMPLATES

router = Router()


def get_registration_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]
        ],
        resize_keyboard=True
    )


@router.message(lambda message: message.text == "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def show_my_data(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    patient = await find_patient_by_chat_id(message.chat.id)

    if patient:
        diagnosis_info = MESSAGE_TEMPLATES.get(patient['diagnosis'], {})
        educational = diagnosis_info.get('educational', '')

        response = (
            f"üë§ <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"‚Ä¢ –§–ò–û: {patient['full_name']}\n"
            f"‚Ä¢ Telegram: {patient.get('telegram_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"‚Ä¢ –î–∏–∞–≥–Ω–æ–∑: {patient['diagnosis']}\n"
            f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –≤–∏–∑–∏—Ç: {patient['next_visit']}\n\n"
            f"{educational}"
        )
        await message.answer(response, parse_mode='HTML')
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_registration_keyboard()
        )


@router.message(lambda message: message.text == "üìÖ –ë–ª–∏–∂–∞–π—à–∏–π –≤–∏–∑–∏—Ç")
async def show_next_visit(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∏–∂–∞–π—à–µ–º –≤–∏–∑–∏—Ç–µ"""
    patient = await find_patient_by_chat_id(message.chat.id)

    if patient:
        template = MESSAGE_TEMPLATES.get(patient['diagnosis'], {}).get('reminder',
                                                                       "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∏–∑–∏—Ç–µ {visit_date} –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {name}.")

        reminder_text = template.format(
            name=patient['full_name'],
            visit_date=patient['next_visit']
        )

        await message.answer(reminder_text)
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_registration_keyboard()
        )


@router.message(lambda message: message.text == "‚ÑπÔ∏è –û–±—É—á–µ–Ω–∏–µ")
async def show_education(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—É—á–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    patient = await find_patient_by_chat_id(message.chat.id)

    if patient:
        educational = MESSAGE_TEMPLATES.get(patient['diagnosis'], {}).get('educational',
                                                                          "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Å–º–æ—Ç—Ä—ã –≤–∞–∂–Ω—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –≤–∞—à–∏—Ö –≥–ª–∞–∑.")

        await message.answer(educational)
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_registration_keyboard()
        )